.\" This file is part of the Ssstr string library.
.\" Copyright 2022-2023 Board of Regents of the University of Wisconsin System
.\" SPDX-License-Identifier: MIT
.\"
.TH SS8_SPRINTF 3  2022-11-06 SSSTR "Ssstr Manual"
.SH NAME
ss8_sprintf, ss8_snprintf, ss8_cat_sprintf, ss8_cat_snprintf, ss8_vsprintf,
ss8_vsnprintf, ss8_cat_vsprintf, ss8_cat_vsnprintf \- format an ssstr byte
string
.SH SYNOPSIS
.nf
.B #include <ss8str.h>
.PP
.BI "ss8str *ss8_sprintf(ss8str *restrict " dest ","
.BI "                    char const *restrict " fmt ", ...);"
.BI "ss8str *ss8_snprintf(ss8str *restrict " dest ", size_t " maxlen ","
.BI "                    char const *restrict " fmt ", ...);"
.PP
.BI "ss8str *ss8_cat_sprintf(ss8str *restrict " dest ","
.BI "                    char const *restrict " fmt ", ...);"
.BI "ss8str *ss8_cat_snprintf(ss8str *restrict " dest ","
.BI "                    size_t " maxlen ", char const *restrict " fmt ","
.BI "                    ...);"
.PP
.BI "ss8str *ss8_vsprintf(ss8str *restrict " dest ","
.BI "                    char const *restrict " fmt ", va_list " args ");"
.BI "ss8str *ss8_vsnprintf(ss8str *restrict " dest ", size_t " maxlen ","
.BI "                    char const *restrict " fmt ", va_list " args ");"
.PP
.BI "ss8str *ss8_cat_vsprintf(ss8str *restrict " dest ","
.BI "                    char const *restrict " fmt ", va_list " args ");"
.BI "ss8str *ss8_cat_vsnprintf(ss8str *restrict " dest ","
.BI "                    size_t " maxlen ", char const *restrict " fmt ","
.BI "                    va_list " args ");"
.fi
.SH DESCRIPTION
.BR ss8_sprintf ()
sets the
.B ss8str
at
.I dest
to the formatted string produced according to the format string
.I fmt
and the arguments following it.
String formatting is performed by internally calling
.BR vsnprintf (3).
.PP
Behavior is undefined unless
.I dest
points to a valid
.B ss8str
object,
.I fmt
is a null-terminated string, the variable arguments follow the rules specified
by
.BR sprintf (3),
the contents of
.I fmt
and any (wide) string or character arguments are valid under the string
encoding used by
.BR vsnprintf (3),
and the length of the resulting formatted string is less than
.BR INT_MAX .
.PP
.BR ss8_snprintf ()
is like
.BR ss8_sprintf (),
except that the resulting string is truncated at
.I maxlen
bytes.
Behavior is undefined unless, in addition to the requirements for
.BR ss8_sprintf (),
.I maxlen
is less than
.BR INT_MAX .
.PP
.BR ss8_cat_sprintf ()
and
.BR ss8_cat_snprintf ()
are like
.BR ss8_sprintf ()
and
.BR ss8_snprintf (),
respectively, except that rather than replacing the string in
.IR dest ,
they append the formatted string to the end of
.IR dest .
The length limit
.RI ( maxlen
or, implicitly for correctness,
.BR "INT_MAX - 1" )
applies to the result of formatting, not the whole string after concatenation.
.PP
.BR ss8_vsprintf (),
.BR ss8_vsnprintf (),
.BR ss8_cat_vsprintf (),
and
.BR ss8_cat_vsnprintf ()
are like the corresponding functions without the
.B v
in the name, except that they take a
.B va_list
.I args
instead of the variable arguments.
.SH RETURN VALUE
All 8 functions return
.IR dest .
.SH BUGS
Calling these functions with any combination of arguments that could produce a
string longer than
.B INT_MAX - 1
will result in undefined behavior, regardless of the value of
.IR maxlen .
This is due to
.BR vsnprintf (3)
returning an
.B int
containing the formatted length.
.PP
Callers should avoid passing strings of unbound length for the
.B %s
conversion specifier, and use great care if dynamically generating
.IR fmt .
.SH SEE ALSO
.BR ss8_cat (3),
.BR ss8_copy (3),
.BR ssstr (7)
